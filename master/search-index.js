var searchIndex = JSON.parse('{\
"command_attr":{"doc":"","t":[23,23,23],"n":["command","check","hook"],"q":["command_attr","",""],"d":["","",""],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"serenity_framework":{"doc":"The official command framework for Serenity bots.","t":[0,4,13,13,5,5,5,5,5,5,5,5,0,3,12,12,0,4,13,13,13,13,12,12,6,6,6,3,12,12,12,12,11,3,11,11,11,11,11,0,6,6,6,6,6,6,3,11,3,12,12,12,12,12,12,12,12,12,12,12,12,11,3,11,11,11,11,11,11,11,11,11,11,11,11,0,6,3,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,0,3,12,12,12,12,12,12,3,12,12,12,3,12,12,12,12,0,4,13,13,13,13,4,13,13,0,5,5,5,5,3,5,5,0,23,23,23,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,5,5,5,3,11,11,11,11,11,11,5,5,5,5,3,11,11,11,11,11,6,6,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["argument","ArgumentError","Missing","Argument","required_argument_from_str","required_argument_parse","optional_argument_from_str","optional_argument_parse","variadic_arguments_from_str","variadic_arguments_parse","rest_argument_from_str","rest_argument_parse","category","Category","name","commands","check","Reason","Unknown","User","Log","UserAndLog","user","log","CheckResult","CheckFn","CheckConstructor","Check","name","function","check_in_help","display_in_help","builder","CheckBuilder","new","function","check_in_help","display_in_help","build","command","StringHook","StringsHook","CommandMap","CommandResult","CommandFn","CommandConstructor","CommandId","into_usize","Command","id","function","names","subcommands","description","dynamic_description","usage","dynamic_usage","examples","dynamic_examples","help_available","check","builder","CommandBuilder","new","name","function","subcommand","description","dynamic_description","usage","dynamic_usage","example","dynamic_examples","check","build","configuration","DynamicPrefix","Configuration","prefixes","dynamic_prefix","case_insensitive","no_dm_prefix","on_mention","categories","root_level_commands","commands","new","prefix","dynamic_prefix","case_insensitive","no_dm_prefix","on_mention","category","command","context","Context","data","conf","serenity_ctx","command_id","prefix","args","PrefixContext","data","conf","serenity_ctx","CheckContext","data","conf","serenity_ctx","command_id","error","DispatchError","NormalMessage","PrefixOnly","InvalidCommandName","CheckFailed","Error","Dispatch","User","parse","mention","dynamic_prefix","static_prefix","content","CommandIterator","commands","command","prelude","check","command","hook","utils","id_map","IdMap","new","len_names","len","is_empty","iter_names","iter_ids","iter","iter_mut","insert_name","get_id","get_by_name","get_by_name_mut","get_pair","contains","contains_id","insert","get","get_mut","segments","segment_index","segment","segment_split","Segments","new","source","set_source","delimiter","case_insensitive","is_empty","quoted_segment_split","quoted_segment","argument_segment_split","argument_segment","ArgumentSegments","new","source","set_source","delimiter","is_empty","DefaultData","DefaultError","Framework","conf","data","new","with_data","with_arc_data","dispatch","parse","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","equivalent","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","into_iter","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","from","from","into_iter","next","next","next","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","default","cmp","eq","ne","partial_cmp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","index","index_mut","hash","source","source","http","cache","http","cache","http","cache"],"q":["serenity_framework","serenity_framework::argument","","","","","","","","","","","serenity_framework","serenity_framework::category","","","serenity_framework","serenity_framework::check","","","","","serenity_framework::check::Reason","","serenity_framework::check","","","","","","","","","","","","","","","serenity_framework","serenity_framework::command","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework","serenity_framework::configuration","","","","","","","","","","","","","","","","","","serenity_framework","serenity_framework::context","","","","","","","","","","","","","","","","serenity_framework","serenity_framework::error","","","","","","","","serenity_framework","serenity_framework::parse","","","","","","","serenity_framework","serenity_framework::prelude","","","serenity_framework","serenity_framework::utils","serenity_framework::utils::id_map","","","","","","","","","","","","","","","","","","","serenity_framework::utils","serenity_framework::utils::segments","","","","","","","","","","","","","","","","","","","","serenity_framework","","","","","","","","","","serenity_framework::argument","","","","","","","","","serenity_framework::category","","","","","","","","","","serenity_framework::check","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::command","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::configuration","","","","","","","","","","serenity_framework::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::error","","","","","","","","","","","","","","","","","","","","","","serenity_framework::parse","","","","","","","","","serenity_framework::utils::id_map","","","","","","","","","","serenity_framework::utils::segments","","","","","","","","","","","","","","","","","","","","","","serenity_framework","","","","","","","","","","serenity_framework::context","","","","","","serenity_framework::command","serenity_framework::error","serenity_framework::utils::id_map","serenity_framework::parse","serenity_framework::utils::segments","","serenity_framework::category","serenity_framework::check","","","serenity_framework::command","","","serenity_framework::configuration","serenity_framework::context","","","serenity_framework::error","","serenity_framework::utils::id_map","serenity_framework::utils::segments","","serenity_framework","serenity_framework::category","serenity_framework::check","","serenity_framework::command","","serenity_framework::configuration","serenity_framework::utils::id_map","serenity_framework::command","","","","serenity_framework::argument","serenity_framework::category","serenity_framework::check","","","serenity_framework::command","","","serenity_framework::configuration","serenity_framework::error","","serenity_framework::utils::id_map","serenity_framework::utils::segments","","serenity_framework::argument","serenity_framework::check","serenity_framework::error","","serenity_framework::utils::id_map","","serenity_framework::command","serenity_framework::argument","serenity_framework::error","serenity_framework::context","","","","",""],"d":["Utilities for parsing command arguments.","Error that might have occured when trying to parse an …","Required argument is missing.","Parsing the argument failed.","Takes a single segment from a list of segments and parses …","Takes a single segment from a list of segments and parses …","Tries to take a single segment from a list of segments …","Tries to take a single segment from a list of segments …","Tries to parse many arguments from a list of segments …","Tries to parse many arguments from a list of segments …","Parses the remainder of the list of segments into an …","Parses the remainder of the list of segments into an …","A list of separate, but related commands.","Grouping of independent commands with a related theme.","Name of the category.","<code>Command</code>s pertaining to this category.","Functions and types relating to checks.","The reason describing why a check failed.","There is no information.","Information for the user.","Information for logging purposes.","Information both for the user and logging purposes.","Information for the user.","Information for logging purposes.","The result type of a check function","The definition of a check function.","A constructor of the [<code>Check</code>] type provided by the …","Data relating to a check.","Name of the check.","The function of this check.","A boolean indicating whether the check can apply in help …","A boolean indicating whether the check can be displayed …","Constructs a builder that will be used to create a check …","A builder type for creating a [<code>Check</code>] from scratch.","Constructs a new instance of the builder.","Assigns the function to this function.","Assigns the indicator to this function.","Assigns the indicator to this function.","Complete building a check.","Functions and types relating to commands.","A function to dynamically create a string.","A function to dynamically create a list of strings.","<code>IdMap</code> for storing commands.","The result type of a command function.","The definition of a command function.","A constructor of the [<code>Command</code>] type provided by the …","A unique identifier of a [<code>Command</code>] stored in the […","Converts the identifier to its internal representation.","Data surrounding a command.","The identifier of this command.","The function of this command.","The names of this command by which it can be invoked.","The subcommands belonging to this command.","A string describing this command.","A function to dynamically describe this command.","A string to express usage of this command.","A function to dynamically express usage of this command.","A list of strings demonstrating usage of this command.","A function to dynamically demonstrate usage of this …","A boolean to indicate whether the command can be shown in …","A function that allows/denies access to this command.","Constructs a builder that will be used to create a …","A builder type for creating a [<code>Command</code>] from scratch.","Constructs a new instance of the builder.","Assigns a name to this command.","Assigns the function to this command.","Assigns a subcommand to this command.","Assigns a static description to this command.","Assigns a function to dynamically create a description to …","Assigns a static usage to this command.","Assigns a function to dynamically create a usage to this …","Assigns a static example of usage to this command.","Assigns a function to dynamically create a list of …","Assigns a <code>check</code> function to this command.","Complete building a command.","Configuration of the framework.","The definition of the dynamic prefix hook.","The configuration of the framework.","A list of static prefixes.","A function to dynamically parse the prefix.","A boolean indicating whether casing of the letters in …","A boolean indicating whether the prefix is not necessary …","A user id of the bot that is used to compare mentions in …","A list of <code>Category</code>s.","A set of commands that can only appear at the beginning …","An <code>IdMap</code> containing all <code>Command</code>s.","Creates a new instance of the framework configuration.","Assigns a prefix to this configuration.","Assigns a function to dynamically parse the prefix.","Assigns a boolean indicating whether the casing of …","Assigns a boolean indicating whether the prefix is not …","Assigns a user id of the bot that will allow for mentions …","Assigns a category to this configuration.","Assigns a command to this configuration.","Data provided in different <em>contexts</em>.","The final context type.","User data.","Framework configuration.","Serenity’s context type.","The identifier of the command.","The prefix that was used to invoke this command.","The arguments of the command.","The prefix context.","User data.","Framework configuration.","Serenity’s context type.","The check context.","User data.","Framework configuration.","Serenity’s context type.","The identifier of the command that is being checked upon.","Defines error types used by the framework.","An error describing why <code>dispatch</code>ing failed.","The message does not contain a command invocation.","The message only contains a prefix. Contains the prefix.","The message contains a name not belonging to any command.","A check failed. Contains its name and the reasoning why …","Returned when the call of <code>dispatch</code> fails.","Failed to dispatch a command.","A command returned an error.","Utilities to parse the prefix and command out of a …","Parses a mention from the message.","Parses a prefix from the message dynamically using the …","Parses a prefix from the message statically from a list …","Returns the content of the message after parsing a prefix.","Command parsing iterator.","Creates a command parsing iterator.","Parses and checks all valid commands in a message after …","A series of re-exports to simplify usage of the framework.","","","","A set of abstraction utilities used by the framework to …","An Identifier Map. An abstraction for structures who may …","An Identifier Map. An abstraction for structures who may …","Creates a new <code>IdMap</code> instance.","Returns the total number of names stored.","Returns the total number of structures stored.","Returns a boolean indicating that the map is empty.","Returns an iterator over all names stored in the map.","Returns an iterator over all identifiers stored in the …","Returns an iterator over all structures and their assigned…","Returns a mutable iterator over all structures and their …","Assigns a name to an identifier.","Retrieves an identifier based on a name.","Retrieves a structure based on an identifier.","Retrieves a structure based on an identifier.","Retrieves both an identifier and its structure based on a …","Returns a boolean indicating that a structure exists …","Returns a boolean indicating that a structure exists …","Assigns a structure to an identifier.","Retrieves a structure based on an identifier.","Retrieves a structure based on an identifier.","Functions and types for handling <em>segments</em>.","Returns the index to the end of a segment in the source.","Returns a segment of the source.","Returns a segment and the rest of the source after the …","An iterator type that splits a string into segments using …","Creates a <code>Segments</code> instance.","Returns the source string from which segments are …","Sets the new source string from which segments are …","Returns the delimiter string that is used to determine …","Returns the boolean that determines whether to ignore …","Returns a boolean indicating that the source string is …","Returns a quoted segment and the rest of the source.","Returns a quoted segment of the source.","Returns an argument segment and the rest of the source.","Returns an argument segment of the source.","An iterator type that splits a string into argument …","Creates a new <code>ArgumentSegments</code> instance.","Returns the source string from which segments are …","Sets the new source string from which segments are …","Returns the delimiter string that is used to determine …","Returns a boolean indicating that the source string is …","The default type for user data when it is unspecified.","The default type for command errors when it is …","The core of the framework.","Configuration of the framework that dictates its …","User data that is accessable in every command and …","Creates a new instanstiation of the framework using a …","Creates new instanstiation of the framework using a given …","Creates new instanstiation of the framework using a given …","Dispatches a command from a message if one is present.","Parses a command out of a message, if one is present.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,3,3,3,4,4,0,0,0,0,5,5,5,5,5,0,6,6,6,6,6,0,0,0,0,0,0,0,0,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,11,11,11,11,11,11,0,12,12,12,0,13,13,13,13,0,0,14,14,14,14,0,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,17,17,17,17,17,17,0,0,0,0,0,18,18,18,18,18,0,0,0,19,19,19,19,19,19,19,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,20,20,20,20,20,20,20,20,20,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,11,11,12,12,13,13,7,15,16,20,17,18,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,2,5,6,8,9,10,16,7,7,7,7,1,2,3,5,6,7,8,9,10,14,15,16,17,18,1,3,14,15,16,16,7,1,15,11,11,12,12,13,13],"f":[null,null,null,null,[[["message",3],["context",3],["argumentsegments",3]]],[[["message",3],["context",3],["argumentsegments",3]]],[[["message",3],["context",3],["argumentsegments",3]]],[[["message",3],["context",3],["argumentsegments",3]]],[[["message",3],["context",3],["argumentsegments",3]]],[[["message",3],["context",3],["argumentsegments",3]]],[[["message",3],["context",3],["argumentsegments",3]]],[[["message",3],["context",3],["argumentsegments",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["checkbuilder",3]],null,[[]],[[["checkfn",6]]],[[["bool",15]]],[[["bool",15]]],[[],["check",3]],null,null,null,null,null,null,null,null,[[],["usize",15]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["commandbuilder",3]],null,[[]],[[]],[[["commandfn",6]]],[[["commandconstructor",6]]],[[]],[[["stringhook",6]]],[[]],[[["stringhook",6]]],[[]],[[["stringshook",6]]],[[["checkconstructor",6]]],[[],["command",3]],null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["dynamicprefix",6]]],[[["bool",15]]],[[["bool",15]]],[[]],[[]],[[["commandconstructor",6]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",15],["str",15]],["option",4]],[[["prefixcontext",3],["message",3]]],[[["str",15]],["option",4]],[[["serenitycontext",3],["arc",3],["configuration",3],["message",3]]],null,[[["configuration",3],["segments",3]],["commanditerator",3]],[[["serenitycontext",3],["configuration",3],["arc",3],["message",3],["str",15]]],null,null,null,null,null,null,null,[[]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["keys",3]],[[],["values",3]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],null,[[["str",15]],["usize",15]],[[["str",15],["str",15]],[["option",4],["str",15]]],[[["str",15],["str",15]],["option",4]],null,[[["bool",15],["str",15]]],[[],["str",15]],[[["str",15]]],[[],["str",15]],[[],["bool",15]],[[],["bool",15]],[[["str",15]],["option",4]],[[["str",15]],[["option",4],["str",15]]],[[["str",15],["str",15]],["option",4]],[[["str",15],["str",15]],[["option",4],["str",15]]],null,[[["str",15]]],[[],["str",15]],[[["str",15]]],[[],["str",15]],[[],["bool",15]],null,null,null,null,null,[[["configuration",3]]],[[["configuration",3]]],[[["arc",3],["configuration",3]]],[[["message",3],["serenitycontext",3]]],[[["message",3],["serenitycontext",3]]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["http",3]],[[],["cache",3]],[[],["http",3]],[[],["cache",3]],[[],["http",3]],[[],["cache",3]],[[["commandconstructor",6]]],[[["dispatcherror",4]]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["category",3]],[[],["reason",4]],[[]],[[]],[[],["commandid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["dispatcherror",4]],[[],["error",4]],[[],["idmap",3]],[[],["segments",3]],[[],["argumentsegments",3]],[[],["framework",3]],[[],["category",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["commandid",3]],["ordering",4]],[[["commandid",3]],["bool",15]],[[["commandid",3]],["bool",15]],[[["commandid",3]],[["option",4],["ordering",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[],[["option",4],["stderror",8]]],[[],[["option",4],["stderror",8]]],[[],["http",3]],[[],[["arc",3],["option",4]]],[[],["http",3]],[[],[["arc",3],["option",4]]],[[],["http",3]],[[],[["arc",3],["option",4]]]],"p":[[4,"ArgumentError"],[3,"Category"],[4,"Reason"],[13,"UserAndLog"],[3,"Check"],[3,"CheckBuilder"],[3,"CommandId"],[3,"Command"],[3,"CommandBuilder"],[3,"Configuration"],[3,"Context"],[3,"PrefixContext"],[3,"CheckContext"],[4,"DispatchError"],[4,"Error"],[3,"IdMap"],[3,"Segments"],[3,"ArgumentSegments"],[3,"Framework"],[3,"CommandIterator"]]}\
}');
initSearch(searchIndex);