var searchIndex = JSON.parse('{\
"command_attr":{"doc":"","t":[23,23,23],"n":["check","command","hook"],"q":["command_attr","",""],"d":["","",""],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"serenity_framework":{"doc":"The official command framework for Serenity bots.","t":[6,6,3,0,11,11,0,0,11,11,0,12,0,0,12,11,0,11,11,11,0,11,0,11,11,11,11,0,11,11,11,13,4,13,4,3,13,13,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,12,12,12,3,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,3,3,6,6,6,13,4,13,13,13,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,6,6,3,6,6,6,6,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,3,6,11,11,11,12,12,11,11,11,11,12,11,11,12,11,11,11,11,11,12,11,12,11,12,12,11,11,11,11,11,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,11,11,5,5,5,5,11,11,11,5,11,5,11,11,11,11,23,23,23,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["DefaultData","DefaultError","Framework","argument","borrow","borrow_mut","category","check","clone","clone_into","command","conf","configuration","context","data","dispatch","error","from","into","new","parse","parse","prelude","to_owned","try_from","try_into","type_id","utils","vzip","with_arc_data","with_data","Argument","ArgumentError","Missing","ParseEither","ParseEitherError","VariantOne","VariantTwo","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","err_one","err_two","fmt","fmt","fmt","fmt","fmt","from","from","from","into","into","into","optional_argument_from_str","optional_argument_parse","parse","required_argument_from_str","required_argument_parse","rest_argument_from_str","rest_argument_parse","source","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","variadic_arguments_from_str","variadic_arguments_parse","vzip","vzip","vzip","0","0","0","Category","borrow","borrow_mut","clone","clone_into","commands","default","fmt","from","into","name","to_owned","try_from","try_into","type_id","vzip","Check","CheckBuilder","CheckConstructor","CheckFn","CheckResult","Log","Reason","Unknown","User","UserAndLog","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","check_in_help","check_in_help","clone","clone","clone","clone_into","clone_into","clone_into","default","default","display_in_help","display_in_help","fmt","fmt","fmt","fmt","from","from","from","function","function","into","into","into","name","new","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","log","user","Command","CommandBuilder","CommandConstructor","CommandFn","CommandId","CommandMap","CommandResult","StringHook","StringsHook","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","builder","check","check","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","default","description","description","dynamic_description","dynamic_description","dynamic_examples","dynamic_examples","dynamic_usage","dynamic_usage","eq","equivalent","example","examples","fmt","fmt","fmt","from","from","from","from","function","function","hash","help_available","id","into","into","into","into_usize","name","names","ne","new","partial_cmp","subcommand","subcommands","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","usage","usage","vzip","vzip","vzip","Configuration","DynamicPrefix","borrow","borrow_mut","case_insensitive","case_insensitive","categories","category","clone","clone_into","command","commands","default","dynamic_prefix","dynamic_prefix","fmt","from","into","new","no_dm_prefix","no_dm_prefix","on_mention","on_mention","prefix","prefixes","root_level_commands","to_owned","try_from","try_into","type_id","vzip","CheckContext","Context","PrefixContext","args","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache","cache","cache","clone","clone","clone","clone_into","clone_into","clone_into","command_id","command_id","conf","conf","conf","data","data","data","from","from","from","http","http","http","into","into","into","prefix","serenity_ctx","serenity_ctx","serenity_ctx","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","CheckFailed","Dispatch","DispatchError","Error","InvalidCommandName","NormalMessage","PrefixOnly","User","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","fmt","fmt","from","from","from","into","into","source","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","0","1","0","0","CommandIterator","borrow","borrow_mut","command","commands","content","dynamic_prefix","from","into","into_iter","mention","next","static_prefix","try_from","try_into","type_id","vzip","check","command","hook","id_map","segments","IdMap","borrow","borrow_mut","clone","clone_into","contains","contains_id","default","fmt","from","get","get_by_name","get_by_name_mut","get_id","get_mut","get_pair","index","index_mut","insert","insert_name","into","into_iter","is_empty","iter","iter_ids","iter_mut","iter_names","len","len_names","new","to_owned","try_from","try_into","type_id","vzip","ArgumentSegments","Segments","argument_segment","argument_segment_split","borrow","borrow","borrow_mut","borrow_mut","case_insensitive","clone","clone","clone_into","clone_into","delimiter","delimiter","fmt","fmt","from","from","into","into","into_iter","into_iter","is_empty","is_empty","new","new","next","next","quoted_segment","quoted_segment_split","segment","segment_index","segment_split","set_source","set_source","source","source","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":["serenity_framework","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::argument","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::argument::ArgumentError","serenity_framework::argument::ParseEither","","serenity_framework::category","","","","","","","","","","","","","","","","serenity_framework::check","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::check::Reason","","","","serenity_framework::command","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::configuration","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::context","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::error::DispatchError","","","","serenity_framework::error::Error","","serenity_framework::parse","","","","","","","","","","","","","","","","","serenity_framework::prelude","","","serenity_framework::utils","","serenity_framework::utils::id_map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serenity_framework::utils::segments","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The default type for user data when it is unspecified.","The default type for command errors when it is …","The core of the framework.","Utilities for parsing command arguments.","","","A list of separate, but related commands.","Functions and types relating to checks.","","","Functions and types relating to commands.","Configuration of the framework that dictates its …","Configuration of the framework.","Data provided in different <em>contexts</em>.","User data that is accessable in every command and …","Dispatches a command from a message if one is present.","Defines error types used by the framework.","","","Creates a new instanstiation of the framework using a …","Utilities to parse the prefix and command out of a …","Parses a command out of a message, if one is present.","A series of re-exports to simplify usage of the framework.","","","","","A set of abstraction utilities used by the framework to …","","Creates new instanstiation of the framework using a given …","Creates new instanstiation of the framework using a given …","Parsing the argument failed.","Error that might have occured when trying to parse an …","Required argument is missing.","Denotes a type that can be either one of two different …","Error that is returned when <code>ParseEither::parse</code> fails.","The first variant.","The second variant.","","","","","","","The error returned from parsing the first variant.","The error returned from parsing the second variant.","","","","","","","","","","","","Tries to take a single segment from a list of segments …","Tries to take a single segment from a list of segments …","","Takes a single segment from a list of segments and parses …","Takes a single segment from a list of segments and parses …","Parses the remainder of the list of segments into an …","Parses the remainder of the list of segments into an …","","","","","","","","","","","","","Tries to parse many arguments from a list of segments …","Tries to parse many arguments from a list of segments …","","","","","","","Grouping of independent commands with a related theme.","","","","","<code>Command</code>s pertaining to this category.","","","","","Name of the category.","","","","","","Data relating to a check.","A builder type for creating a <code>Check</code> from scratch.","A constructor of the <code>Check</code> type provided by the consumer …","The definition of a check function.","The result type of a check function","Information for logging purposes.","The reason describing why a check failed.","There is no information.","Information for the user.","Information both for the user and logging purposes.","","","","","","","Complete building a check.","Constructs a builder that will be used to create a check …","Assigns the indicator to this function.","A boolean indicating whether the check can apply in help …","","","","","","","","","Assigns the indicator to this function.","A boolean indicating whether the check can be displayed …","","","","","","","","Assigns the function to this function.","The function of this check.","","","","Name of the check.","Constructs a new instance of the builder.","","","","","","","","","","","","","","","","","","","Information for logging purposes.","Information for the user.","Data surrounding a command.","A builder type for creating a <code>Command</code> from scratch.","A constructor of the <code>Command</code> type provided by the …","The definition of a command function.","A unique identifier of a <code>Command</code> stored in the <code>CommandMap</code>.","<code>IdMap</code> for storing commands.","The result type of a command function.","A function to dynamically create a string.","A function to dynamically create a list of strings.","","","","","","","Complete building a command.","Constructs a builder that will be used to create a …","Assigns a <code>check</code> function to this command.","A function that allows/denies access to this command.","","","","","","","","","","Assigns a static description to this command.","A string describing this command.","Assigns a function to dynamically create a description to …","A function to dynamically describe this command.","Assigns a function to dynamically create a list of …","A function to dynamically demonstrate usage of this …","Assigns a function to dynamically create a usage to this …","A function to dynamically express usage of this command.","","","Assigns a static example of usage to this command.","A list of strings demonstrating usage of this command.","","","","","","","","Assigns the function to this command.","The function of this command.","","A boolean to indicate whether the command can be shown in …","The identifier of this command.","","","","Converts the identifier to its internal representation.","Assigns a name to this command.","The names of this command by which it can be invoked.","","Constructs a new instance of the builder.","","Assigns a subcommand to this command.","The subcommands belonging to this command.","","","","","","","","","","","","","Assigns a static usage to this command.","A string to express usage of this command.","","","","The configuration of the framework.","The definition of the dynamic prefix hook.","","","Assigns a boolean indicating whether the casing of …","A boolean indicating whether casing of the letters in …","A list of <code>Category</code>s.","Assigns a category to this configuration.","","","Assigns a command to this configuration.","An <code>IdMap</code> containing all <code>Command</code>s.","","Assigns a function to dynamically parse the prefix.","A function to dynamically parse the prefix.","","","","Creates a new instance of the framework configuration.","Assigns a boolean indicating whether the prefix is not …","A boolean indicating whether the prefix is not necessary …","Assigns a user id of the bot that will allow for mentions …","A user id of the bot that is used to compare mentions in …","Assigns a prefix to this configuration.","A list of static prefixes.","A set of commands that can only appear at the beginning …","","","","","","The check context.","The final context type.","The prefix context.","The arguments of the command.","","","","","","","","","","","","","","","","","","","","","","The identifier of the command.","The identifier of the command that is being checked upon.","Framework configuration.","Framework configuration.","Framework configuration.","User data.","User data.","User data.","","","","","","","","","","The prefix that was used to invoke this command.","Serenity’s context type.","Serenity’s context type.","Serenity’s context type.","","","","","","","","","","","","","","","","A check failed. Contains its name and the reasoning why …","Failed to dispatch a command.","An error describing why <code>dispatch</code>ing failed.","Returned when the call of <code>dispatch</code> fails.","The message contains a name not belonging to any command.","The message does not contain a command invocation.","The message only contains a prefix. Contains the prefix.","A command returned an error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Command parsing iterator.","","","Parses and checks all valid commands in a message after …","Creates a command parsing iterator.","Returns the content of the message after parsing a prefix.","Parses a prefix from the message dynamically using the …","","","","Parses a mention from the message.","","Parses a prefix from the message statically from a list …","","","","","","","","An Identifier Map. An abstraction for structures who may …","Functions and types for handling <em>segments</em>.","An Identifier Map. An abstraction for structures who may …","","","","","Returns a boolean indicating that a structure exists …","Returns a boolean indicating that a structure exists …","","","","Retrieves a structure based on an identifier.","Retrieves a structure based on an identifier.","Retrieves a structure based on an identifier.","Retrieves an identifier based on a name.","Retrieves a structure based on an identifier.","Retrieves both an identifier and its structure based on a …","","","Assigns a structure to an identifier.","Assigns a name to an identifier.","","","Returns a boolean indicating that the map is empty.","Returns an iterator over all structures and their assigned…","Returns an iterator over all identifiers stored in the …","Returns a mutable iterator over all structures and their …","Returns an iterator over all names stored in the map.","Returns the total number of structures stored.","Returns the total number of names stored.","Creates a new <code>IdMap</code> instance.","","","","","","An iterator type that splits a string into argument …","An iterator type that splits a string into segments using …","Returns an argument segment of the source.","Returns an argument segment and the rest of the source.","","","","","Returns the boolean that determines whether to ignore …","","","","","Returns the delimiter string that is used to determine …","Returns the delimiter string that is used to determine …","","","","","","","","","Returns a boolean indicating that the source string is …","Returns a boolean indicating that the source string is …","Creates a <code>Segments</code> instance.","Creates a new <code>ArgumentSegments</code> instance.","","","Returns a quoted segment of the source.","Returns a quoted segment and the rest of the source.","Returns a segment of the source.","Returns the index to the end of a segment in the source.","Returns a segment and the rest of the source after the …","Sets the new source string from which segments are …","Sets the new source string from which segments are …","Returns the source string from which segments are …","Returns the source string from which segments are …","","","","","","","","","",""],"i":[0,0,0,0,1,1,0,0,1,1,0,1,0,0,1,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,2,0,2,0,0,3,3,4,2,3,4,2,3,4,4,4,4,2,2,3,4,2,3,4,2,3,0,0,3,0,0,0,0,2,4,2,4,2,3,4,2,3,4,2,3,0,0,4,2,3,5,6,7,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,9,0,9,9,9,10,11,9,10,11,9,11,10,11,10,10,11,9,10,11,9,10,11,11,10,10,11,9,9,10,11,9,11,10,10,11,9,10,11,10,11,9,9,10,11,9,10,11,9,10,11,9,10,11,9,12,13,14,14,0,0,0,0,0,0,0,0,0,15,16,17,15,16,17,16,15,16,15,15,16,17,15,16,17,17,15,16,16,15,16,15,16,15,16,15,17,17,16,15,15,16,17,15,16,17,17,16,15,17,15,15,15,16,17,17,16,15,17,16,17,16,15,15,16,17,15,16,17,15,16,17,15,16,17,16,15,15,16,17,0,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,0,0,19,19,19,20,20,21,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,19,20,21,22,23,0,0,22,22,22,23,22,23,22,23,22,23,22,23,22,22,23,23,22,23,23,22,23,23,22,23,22,23,22,23,22,23,22,23,22,23,24,25,26,26,27,28,0,29,29,0,0,0,0,29,29,29,0,29,0,29,29,29,29,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,0,0,0,31,32,31,32,31,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,0,0,0,0,0,31,32,31,32,31,32,31,32,31,32,31,32,31,32],"f":[null,null,null,null,[[]],[[]],null,null,[[],["framework",3]],[[]],null,null,null,null,null,[[["serenitycontext",3],["message",3]]],null,[[]],[[]],[[["configuration",3]]],null,[[["serenitycontext",3],["message",3]]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[["configuration",3],["arc",3]]],[[["configuration",3]]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["context",3],["message",3],["argumentsegments",3]]],[[["context",3],["message",3],["argumentsegments",3]]],[[["str",15],["context",3],["message",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["context",3],["message",3],["argumentsegments",3]]],[[["context",3],["message",3],["argumentsegments",3]]],[[["context",3],["message",3],["argumentsegments",3]]],[[["context",3],["message",3],["argumentsegments",3]]],[[],[["option",4,["stderror"]],["stderror",8]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["context",3],["message",3],["argumentsegments",3]]],[[["context",3],["message",3],["argumentsegments",3]]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[],["category",3]],[[]],null,[[],["category",3]],[[["formatter",3]],["result",6]],[[]],[[]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["check",3]],[[],["checkbuilder",3]],[[["bool",15]]],null,[[]],[[]],[[],["reason",4]],[[]],[[]],[[]],[[]],[[]],[[["bool",15]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["checkfn",6]]],null,[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["command",3]],[[],["commandbuilder",3]],[[["checkconstructor",6]]],null,[[]],[[]],[[],["commandid",3]],[[]],[[]],[[]],[[["commandid",3]],["ordering",4]],[[]],[[]],[[]],null,[[["stringhook",6]]],null,[[["stringshook",6]]],null,[[["stringhook",6]]],null,[[["commandid",3]],["bool",15]],[[],["bool",15]],[[]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["commandconstructor",6]]],[[["commandfn",6]]],null,[[]],null,null,[[]],[[]],[[]],[[],["usize",15]],[[]],null,[[["commandid",3]],["bool",15]],[[]],[[["commandid",3]],[["option",4,["ordering"]],["ordering",4]]],[[["commandconstructor",6]]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],[[]],[[]],null,null,[[]],[[]],[[["bool",15]]],null,null,[[]],[[]],[[]],[[["commandconstructor",6]]],null,[[]],[[["dynamicprefix",6]]],null,[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["bool",15]]],null,[[]],null,[[]],null,null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,[[],["cache",3]],[[],["http",3]],[[],["cache",3]],[[],["http",3]],[[],["cache",3]],[[],["http",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["arc",3],["option",4,["arc"]]]],[[],[["arc",3],["option",4,["arc"]]]],[[],[["arc",3],["option",4,["arc"]]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["http",3]],[[],["http",3]],[[],["http",3]],[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["dispatcherror",4]],[[],["error",4]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["dispatcherror",4]]],[[]],[[]],[[]],[[],[["option",4,["stderror"]],["stderror",8]]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,[[]],[[]],[[["message",3],["arc",3],["configuration",3],["serenitycontext",3],["str",15]]],[[["configuration",3],["segments",3]],["commanditerator",3]],[[["arc",3],["configuration",3],["serenitycontext",3],["message",3]]],[[["message",3],["prefixcontext",3]]],[[]],[[]],[[]],[[["str",15],["str",15]],["option",4]],[[],["option",4]],[[["str",15]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,[[]],[[]],[[],["idmap",3]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["values",3]],[[],["itermut",3]],[[],["keys",3]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[["str",15],["str",15]],[["option",4,["str"]],["str",15]]],[[["str",15],["str",15]],["option",4]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["segments",3]],[[],["argumentsegments",3]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["str",15],["bool",15]]],[[["str",15]]],[[],["option",4]],[[],["option",4]],[[["str",15]],[["option",4,["str"]],["str",15]]],[[["str",15]],["option",4]],[[["str",15],["str",15]],[["option",4,["str"]],["str",15]]],[[["str",15]],["usize",15]],[[["str",15],["str",15]],["option",4]],[[["str",15]]],[[["str",15]]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]]],"p":[[3,"Framework"],[4,"ArgumentError"],[4,"ParseEither"],[3,"ParseEitherError"],[13,"Argument"],[13,"VariantOne"],[13,"VariantTwo"],[3,"Category"],[4,"Reason"],[3,"Check"],[3,"CheckBuilder"],[13,"User"],[13,"Log"],[13,"UserAndLog"],[3,"Command"],[3,"CommandBuilder"],[3,"CommandId"],[3,"Configuration"],[3,"Context"],[3,"PrefixContext"],[3,"CheckContext"],[4,"DispatchError"],[4,"Error"],[13,"PrefixOnly"],[13,"InvalidCommandName"],[13,"CheckFailed"],[13,"Dispatch"],[13,"User"],[3,"CommandIterator"],[3,"IdMap"],[3,"Segments"],[3,"ArgumentSegments"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};